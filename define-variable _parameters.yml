
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
in the pipeline section, we are going to define our YAML file structure

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%      
Templates:
Templates let you define reusable content, logic, and parameters 
Templates can be used two ways:
1.	to insert reusable content
2.	to control what is allowed in a pipeline


templatize the yaml Pipeline
templatize will allow us to remove all this hard-coded stuff, so we could use it for 
other projects with in azure devops



we are going to creating 3 yaml files 
terraform-validate.yml
terraform-deploy.yml
azure-pipeline.yml

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
terraform-validate.yml

parameters:
  terraformVersion: ''
  serviceprincipal: ''
  resourcegroup: ''
  storageAccountName: ''
  storageContainerName: ''
  storageKey: ''


jobs:
  - job: validate
    continueonError: false
    steps:
    - task: TerraformInstaller@0
      displayName: latest
      inputs:
        terraformVersion: ${{parameters.terraformVersion}}

    - task: TerraformTaskV3@3
      displayName: init
      inputs:
        provider: 'azurerm'
        command: 'init'

    - task: TerraformTaskV3@3
      displayName: validate
      inputs:
        provider: 'azurerm'
        command: 'validate'



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
terraform-deploy.yml

parameters:
  terraformVersion: ''
  serviceprincipal: ''
  resourcegroup: ''
  storageAccountName: ''
  storageContainerName: ''
  storageKey: ''
  deployEnv: ''


jobs:
  - deployment: deploy_terraform
    continueonError: false
    environment: ${{parameters.deployEnv}}
    strategy:
     runOnce:
       deploy:
        steps: 
          - checkout: self

          - task: TerraformInstaller@0
            displayName = latest
            inputs:
              terraformVersion: 'latest'

          - task: TerraformTaskV3@3
            displayName: init
            inputs:
              provider: 'azurerm'
              command: 'init'

          - task: TerraformTaskV3@3
            displayName: apply
            inputs:
              provider: 'azurerm'
              command: 'apply'

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
azure-pipeline.yml

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  

resources:
 repositories:
   - repository: temlates
     name: tutorials/temlates
     type: git
jobs:
- template: terraform-validate.yml@templates
  parameters:
    terraformVersion: '0.12.26'
    serviceprincipal: 'azure-spn'
    resourcegroup: 'rg'
    storageAccountName: 'st'
    storageContainerName: 'con'
    storageKey: 'tf.tfstate'
    

- template: terraform-deploy.yml@templates
  parameters:
    terraformVersion: '0.12.26'
    serviceprincipal: 'azure-spn'
    resourcegroup: 'rg'
    storageAccountName: 'st'
    storageContainerName: 'con'
    storageKey: 'tf.tfstate'
    deployEnv: 'dev'
              
 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Ref: https://www.youtube.com/watch?v=7CsmBO8KR4U&ab_channel=geralexgr

parameters:
- name: image
  displayName: pool image
  type: string
  default: ubuntu-latest
  values:
    - windows-latest
    - ubuntu-latest
    - macos-latest

variables:
- name: myvar
  value: ${{parameters.image}}


condition: or { eq (variables.myvar, 'ubuntu-latest'), eq(variables.myvar, 'windows-lates')}



